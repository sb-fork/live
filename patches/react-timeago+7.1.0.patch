diff --git a/node_modules/react-timeago/179.patch b/node_modules/react-timeago/179.patch
new file mode 100644
index 0000000..ecfa3c7
--- /dev/null
+++ b/node_modules/react-timeago/179.patch
@@ -0,0 +1,41 @@
+From cba620c1dd6a19d93725d4a7a0e9ec89d5bb853f Mon Sep 17 00:00:00 2001
+From: Frederick Cheung <frederick.cheung@gmail.com>
+Date: Wed, 13 Jul 2022 15:10:55 +0100
+Subject: [PATCH] Fix timeNow not being updated if props change frequently
+
+If the props (for example) date change more frequently than the refresh period
+then the timeout will get cancelled an rescheduled. If this happens often the refresh can be delayed indefinitely
+---
+ src/index.js | 11 +++++++++++
+ 1 file changed, 11 insertions(+)
+
+diff --git a/src/index.js b/src/index.js
+index a376240..6c25689 100644
+--- a/src/index.js
++++ b/src/index.js
+@@ -69,6 +69,13 @@ export default function TimeAgo({
+   ...passDownProps
+ }: Props): null | React.MixedElement {
+   const [timeNow, setTimeNow] = useState(now())
++  const updateNoLaterThan = useRef(null)
++
++  if(updateNoLaterThan.current && Date.now() > updateNoLaterThan.current){
++    updateNoLaterThan.current = null
++    setTimeNow(now())
++  }
++
+   useEffect(() => {
+     if (!live) {
+       return
+@@ -96,7 +103,11 @@ export default function TimeAgo({
+       )
+ 
+       if (period) {
++        if(updateNoLaterThan.current == null){
++          updateNoLaterThan.current = now() + period + 100
++        }
+         return setTimeout(() => {
++          updateNoLaterThan.current = null
+           setTimeNow(now())
+         }, period)
+       }
diff --git a/node_modules/react-timeago/es6/index.js b/node_modules/react-timeago/es6/index.js
index 086df64..fea5c64 100644
--- a/node_modules/react-timeago/es6/index.js
+++ b/node_modules/react-timeago/es6/index.js
@@ -1,7 +1,7 @@
 function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
 
 import * as React from 'react';
-import { useEffect, useState } from 'react';
+import { useEffect, useRef, useState } from 'react';
 import dateParser from './dateParser';
 import defaultFormatter from './defaultFormatter';
 // Just some simple constants for readability
@@ -23,6 +23,13 @@ export default function TimeAgo({
   ...passDownProps
 }) {
   const [timeNow, setTimeNow] = useState(now());
+  const updateNoLaterThan = useRef(null);
+
+  if (updateNoLaterThan.current && Date.now() > updateNoLaterThan.current) {
+    updateNoLaterThan.current = null;
+    setTimeNow(now());
+  }
+
   useEffect(() => {
     if (!live) {
       return;
@@ -41,7 +48,12 @@ export default function TimeAgo({
       const period = Math.min(Math.max(unboundPeriod, minPeriod * 1000), maxPeriod * 1000);
 
       if (period) {
+        if (updateNoLaterThan.current == null) {
+          updateNoLaterThan.current = now() + period + 100;
+        }
+
         return setTimeout(() => {
+          updateNoLaterThan.current = null;
           setTimeNow(now());
         }, period);
       }
diff --git a/node_modules/react-timeago/lib/index.js b/node_modules/react-timeago/lib/index.js
index 7f1109b..51fe094 100644
--- a/node_modules/react-timeago/lib/index.js
+++ b/node_modules/react-timeago/lib/index.js
@@ -77,6 +77,13 @@ function TimeAgo(_ref) {
       timeNow = _useState2[0],
       setTimeNow = _useState2[1];
 
+  var updateNoLaterThan = (0, React.useRef)(null);
+
+  if (updateNoLaterThan.current && Date.now() > updateNoLaterThan.current) {
+    updateNoLaterThan.current = null;
+    setTimeNow(now());
+  }
+
   (0, React.useEffect)(function () {
     if (!live) {
       return;
@@ -95,7 +102,12 @@ function TimeAgo(_ref) {
       var period = Math.min(Math.max(unboundPeriod, minPeriod * 1000), maxPeriod * 1000);
 
       if (period) {
+        if (updateNoLaterThan.current == null) {
+          updateNoLaterThan.current = now() + period + 100;
+        }
+
         return setTimeout(function () {
+          updateNoLaterThan.current = null;
           setTimeNow(now());
         }, period);
       }
